{"version":3,"sources":["Components/MediaCard.js","Components/OpportunitiesList.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","card","maxWidth","media","height","props","classes","react_default","a","createElement","Card_default","className","CardActionArea_default","CardMedia_default","image","opp","cover_photo_urls","title","CardContent_default","Typography_default","gutterBottom","variant","component","branch","name","align","location","duration","OpportunitiesList","state","showModal","getSyle","width","float","border","margin","boxShadow","updateOpp","_callee","id","desc","regenerator_default","wrap","_context","prev","next","Axios","patch","description","stop","_this2","this","class","type","data-dismiss","opps","map","style","onClick","setState","data-toggle","data-target","Components_MediaCard","key","role","Component","App","_isMounted","current_page","loading","componentDidMount","_this","document","addEventListener","trackScrolling","axios","get","sent","data","loadMore","_callee2","_context2","concat","Object","toConsumableArray","wrappedElement","getElementById","isBottom","removeEventListener","el","getBoundingClientRect","bottom","window","innerHeight","OpportunitiesList_OpportunitiesList","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0feb8fb.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CardActions } from \"@material-ui/core\";\nconst styles = {\n  card: {\n    maxWidth: 345\n  },\n  media: {\n    height: 140\n  }\n};\n\nfunction MediaCard(props) {\n  const { classes } = props;\n  return (\n    <div  >\n      <Card className={classes.card} >\n        <CardActionArea>\n          <CardMedia\n            className={classes.media}\n            image={props.opp.cover_photo_urls}\n            title={props.opp.title}\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {props.opp.title}\n            </Typography>\n            <Typography component=\"p\">\n              <h3> Partner : {props.opp.branch.name}</h3>\n              <h4 align=\"left\"> Location : {props.opp.branch.location} </h4>\n              <h4 align=\"right\"> Duration : {props.opp.branch.duration}</h4>\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    \n    </div>\n  );\n}\n\nMediaCard.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(MediaCard);\n","import React, { Component } from \"react\";\nimport {Modal} from \"react-bootstrap\"\nimport {ModalHeader} from \"react-bootstrap\"\nimport {ModalBody} from \"react-bootstrap\"\nimport {ModalFooter} from \"react-bootstrap\"\nimport {Button} from \"react-bootstrap\"\nimport MediaCard from \"./MediaCard\";\nimport {FormGroup} from \"react-bootstrap\"\nimport Axios from \"axios\";\nexport default class OpportunitiesList extends Component {\n  state={\n    showModal:false\n  }\n    getSyle = () => {\n    return {\n      width: \" 300px\",\n      height: \"400px\",\n      float: \"left\",\n      border: \"1px\",\n      margin: \"50px\",\n      boxShadow:\n        \" 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 10px 0 rgba(0, 0, 0, 0.19)\"\n    };\n  };\n\n  updateOpp= async (id,title,desc)=>{\n      await Axios.patch(\"http://gisapi-web-staging-1636833739.eu-west-1.elb.amazonaws.com/v2/opportunities/\"+id+\"?access_token=dd0df21c8af5d929dff19f74506c4a8153d7acd34306b9761fd4a57cfa1d483c\",{\n          title:title, description:desc\n      })\n  }\n\n//   showModalHandler= async()=>{\n//    await this.setState({showModal:true})\n//     console.log (this.state.showModal)\n//   }\n\n//   hideModalHandler= ()=>{\n//     this.setState({showModal:false})\n//   }\n  render() {\n   if (this.state.showModal)\n      return(\n      <div class=\"modal-dialog\">\n    \n       \n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n            <h4 class=\"modal-title\">Modal Header</h4>\n          </div>\n          <div class=\"modal-body\">\n            <p>Some text in the modal.</p>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n          </div>\n        </div>\n    \n      </div> );\n    return (this.props.opps.map(opp => (\n      <div  style={this.getSyle() } onClick={()=>this.setState({showModal:true})} data-toggle=\"modal\" data-target=\"#myModal\">\n        <MediaCard\n       \n          key={opp.id}\n          opp={opp}\n          \n        />\n        <p> {}</p>\n        <p> {}</p>\n        <div id=\"myModal\" class=\"modal fade\" role=\"dialog\">\n</div>\n{/*       \n<Modal isOpen={this.state.showModal} toggle={()=>this.showModalHandler()}>\n        <ModalHeader toggle={this.showModalHandler.bind(this)}>Edit a new Request</ModalHeader>\n        <ModalBody>\n       \n        \n          <FormGroup>\n            <Label for=\"accepted\">accepted</Label>\n            <Input id=\"accepted\" value={this.state.editRequestData.accepted} onChange={(e) => {\n              let { editRequestData } = this.state;\n\n              editRequestData.accepted = e.target.value;\n\n              this.setState({ editRequestData });\n            }} />\n             <Label for=\"feedback\">feedback</Label>\n            <Input id=\"feedback\" value={this.state.editRequestData.feedback} onChange={(e) => {\n              let { editRequestData } = this.state;\n\n              editRequestData.feedback = e.target.value;\n\n              this.setState({ editRequestData });\n            }} />\n            <h3>ay 7aga</h3>\n          </FormGroup>\n\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" >Update Request</Button>{' '}\n          <Button color=\"secondary\" >Cancel</Button>\n        </ModalFooter>\n      </Modal> */}\n      </div>\n    )));\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport OpportunitiesList from \"./Components/OpportunitiesList\";\nimport axios from \"axios\";\nclass App extends Component {\n  _isMounted=false;\n  state = {\n    opps: [],\n    current_page: 1,\n    loading:false,\n    \n  };\n  componentWillUnmount() {\n   this._isMounted=false\n    document.removeEventListener(\"scroll\", this.trackScrolling);\n  }\n\n  componentDidMount = async () => {\n    this._isMounted=true\n    document.addEventListener(\"scroll\", this.trackScrolling);\n    let opps = await axios.get(\n      \"http://gisapi-web-staging-1636833739.eu-west-1.elb.amazonaws.com/v2/opportunities?access_token=dd0df21c8af5d929dff19f74506c4a8153d7acd34306b9761fd4a57cfa1d483c&page=\" +\n        this.state.current_page+\"&per_page=24\"\n    );\n      if (this._isMounted)\n    this.setState({ opps: opps.data.data });\n   \n  };\n \n  loadMore=async ()=>{\n    if (this._isMounted){\n      \n      this.setState({current_page:this.state.current_page+1})\n    \n    let opps = await axios.get(\n      \"http://gisapi-web-staging-1636833739.eu-west-1.elb.amazonaws.com/v2/opportunities?access_token=dd0df21c8af5d929dff19f74506c4a8153d7acd34306b9761fd4a57cfa1d483c&page=\" +\n      this.state.current_page+\"&per_page=15\"\n      );\n      this.setState({opps:[...this.state.opps,...opps.data.data]})\n      // console.log (this.state.opps)\n      \n      document.addEventListener('scroll', this.trackScrolling);\n      this.setState({loading:false})\n    }\n      \n  }\n\n\n  isBottom(el) {\n    \n    return -el.getBoundingClientRect().bottom-1500 > window.innerHeight;\n  }\n  \n  trackScrolling = () => {\n    const wrappedElement = document.getElementById(\"scrolled\");\n    \n    if (this.isBottom(wrappedElement)) {\n    this.setState({loading:true})\n      this.loadMore()\n     //document.removeEventListener(\"scroll\", this.trackScrolling);\n    }\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"scrolled\">\n          <OpportunitiesList className=\"App\" opps={this.state.opps}\n         \n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}